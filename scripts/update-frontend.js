const fs = require("fs");
const path = require("path");
const { getContractAddresses, getContractAbi } = require("./utils/contract-utils");

// Networks to include in the frontend config
const NETWORKS = ["localhost", "sepolia", "mainnet"];

/**
 * Main function to update frontend contract configuration
 */
async function main() {
  try {
    console.log("Updating frontend contract configuration...");
    
    // Create the output directory if it doesn't exist
    const outputDir = path.join(__dirname, "../src/contracts");
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // Generate contract configuration for each network
    const config = {
      networks: {},
      abis: {}
    };
    
    // Process each network
    for (const network of NETWORKS) {
      try {
        const addresses = getContractAddresses(network);
        if (addresses.topAcc && addresses.addService) {
          config.networks[network] = addresses;
          console.log(`‚úì Added configuration for ${network}`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Skipping ${network}: ${error.message}`);
      }
    }
    
    // Get ABIs
    try {
      config.abis = {
        topAcc: getContractAbi("topAcc"),
        addService: getContractAbi("addService")
      };
      console.log("‚úì Loaded contract ABIs");
    } catch (error) {
      console.error("‚ùå Failed to load ABIs:", error.message);
    }
    
    // Write the configuration file
    const configPath = path.join(outputDir, "config.json");
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    
    // Create TypeScript type definitions
    const typeDefs = `// Auto-generated by scripts/update-frontend.js
// Last updated: ${new Date().toISOString()}

export interface ContractAddresses {
  topAcc: string | null;
  addService: string | null;
  network: string;
  timestamp?: string;
  error?: string;
}

export interface ContractConfig {
  networks: {
    [network: string]: ContractAddresses;
  };
  abis: {
    topAcc: any[];
    addService: any[];
  };
}

const config: ContractConfig = ${JSON.stringify(config, null, 2)};

export default config;`;
    
    fs.writeFileSync(path.join(outputDir, "config.ts"), typeDefs);
    
    console.log("\n‚úÖ Successfully updated frontend contract configuration!");
    console.log(`üìÅ Output: ${path.relative(process.cwd(), outputDir)}/config.{json,ts}`);
    
  } catch (error) {
    console.error("‚ùå Error updating frontend configuration:", error);
    process.exit(1);
  }
}

main();
